@model Protocolo.Models.UsuarioModel

@{
    ViewBag.Title = "Cadastrar usuário";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-lg-12">
        <ol class="breadcrumb" style="margin-left: -30px; margin-right: -30px;">
            <li>
                <a href="@Url.Action("Home", "Protocolo")">
                    <i class="fa fa-home fa-fw"></i>
                </a>
            </li>
            <li>
                <a href="@Url.Action("Index", "Usuario")">
                    Usuários
                </a>
            </li>
            <li class="active">

            </li>
        </ol>
        <h1 class="page-header"></h1>
        @{ Html.RenderPartial("_Alerts"); }
    </div>
</div>

<div class="row">
    <div class="row">

        <div class="card card-primary">
            <div class="card-header">
                <h4 class="page-header">@ViewBag.Title</h4>
            </div>

            @using (Html.BeginForm("Cadastrar", "Usuario", FormMethod.Post, new { id = "usuarioForm" }))
            {
                @Html.AntiForgeryToken()

                <div class="col-lg-12">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-lg-12">
                                <div class="form-group required">
                                    @Html.LabelFor(model => model.Nome, new { @class = "control-label" })
                                    @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control", @tabindex = 1 } })
                                    @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-lg-6">
                                <div class="form-group required">
                                    @Html.LabelFor(model => model.Logon, new { @class = "control-label" })
                                    @Html.EditorFor(model => model.Logon, new { htmlAttributes = new { @class = "form-control", @tabindex = 2 } })
                                    @Html.ValidationMessageFor(model => model.Logon, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Telefone)
                                    @Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control", @tabindex = 4, @mask = "(99)9999-9999?9" } })
                                    @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    <div>
                                        @Html.LabelFor(model => model.Ativo)
                                    </div>
                                    <div class="radio-inline">
                                        <label style="font-weight: normal;">
                                            @Html.RadioButtonFor(model => model.Ativo, true, new { @tabindex = 6 }) Sim
                                        </label>
                                    </div>
                                    <div class="radio-inline">
                                        <label style="font-weight: normal;">
                                            @Html.RadioButtonFor(model => model.Ativo, false, new { @tabindex = 6 }) Não
                                        </label>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Ativo, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-lg-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Email)
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", @tabindex = 3 } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Celular)
                                    @Html.EditorFor(model => model.Celular, new { htmlAttributes = new { @class = "form-control", @tabindex = 5, @mask = "(99)9999-9999?9" } })
                                    @Html.ValidationMessageFor(model => model.Celular, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-lg-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Perfil)
                                    <div class="col-sm-6">
                                        @Html.DropDownListFor(model => model.Perfil, Model.Perfis, "Selecione", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Perfil, null, new { @class = "text-red" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12">
                                <div class="form-group text-center">
                                    <input type="submit" value="Salvar" class="btn btn-outline btn-primary" id="salvar" tabindex="12" />
                                    <input type="button" value="Cancelar" class="btn btn-outline btn-primary" tabindex="13" onclick="location.href='@Url.Action("Index", "Usuario")'" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {
            if ($('#dataTables-setor')) {
                setorDataTable();
                enablePadrao();
            }

            clearSelection('#Selectables');
            clearSelection('#PerfisList');

            $('#SecretariaId').on('change', function () {
                // clear table
                $('#setores-container').hide().empty();

                if ($(this).val()) {
                    $.ajax({
                        url: '@Url.Action("GetSetores", "Usuario")',
                        data: $(this).closest('form').serializeArray(),
                        type: 'POST',
                        success: function (data) {
                            $('#setores-container').html(data).show();

                            setorDataTable();
                        }
                    });
                }
            });

            $(document).on('change', '.selectAll', function () {
                var checks_padrao = $('input[name$=".Padrao"]');

                if ($(this).prop('checked')) {
                    checks_padrao.removeAttr('disabled');
                } else {
                    checks_padrao.attr('disabled', 'disabled');

                    checks_padrao.prop('checked', false);
                }
            }).on('click', '.checkbox_class', function () {
                var padrao = $('input[name="' + $(this).attr('name').split('.')[0] + '.Padrao"]');

                if ($(this).prop('checked')) {
                    padrao.removeAttr('disabled');

                    padrao.prop('checked', $('input:checkbox[name$=".Padrao"]:checked').length == 0);
                } else {
                    padrao.attr('disabled', 'disabled');

                    padrao.prop('checked', false);
                }
            }).on('click', 'input:checkbox[name$=".Padrao"]', function () {
                if ($(this).prop('checked')) {
                    $('input:checkbox[name$=".Padrao"]:checked:not("#' + $(this).attr('id') + '")').prop('checked', false);
                }
            });

            $('#salvar').on('click', function (e) {
                e.preventDefault();

                $('#PerfisList option').attr('selected', 'selected')

                confirmAction($(this));
            });
        });

        function setorDataTable() {
            $('#dataTables-setor').dataTable({
                'language': {
                    'url': '@Url.Content("~/Content/JSON/datatables-portugues.json")'
                },
                'paging': false,
                'info': false,
                'order': [[1, 'asc']]
            });
        }

        function enablePadrao() {
            $('input:checkbox[name$=".Selecionado"]:checked').each(function () {
                $('input[name="' + $(this).attr('name').split('.')[0] + '.Padrao"]').removeAttr('disabled');
            });
        }
    </script>
}
